1	字符串大小写
	s="hello javen"
	s.title() -------> "Hello Javen"
	s.upper() -------> "HELLO JAVEN"
	s.lower() -------> "hello javen"
	
2	合并拼接字符串
	s1="hello"
	s2="javen"
	s=s1+" "+s2 -----> "hello javen"
	"\n\t" ----------> \n表示转行，\t表示制表符

3	删除空白
	s=" hello "
	s.strip() -------> "hello" 删除头尾的空格
	s.lstrip() ------> "hello " 删除开头的空格
	s.rstrip() ------> " hello" 删除末尾的空格

4	乘方运算的表示
	10**6=1000000 表示10的6次方

5	将整数转换成字符串
	age=23
	print "he is " + str(age) + " years old!" 使用str()函数

6	判断变量类型
	使用type()函数，但存在一定的缺陷，即无法区分子类与父类。
	高端的用法是使用isinstance()函数。

6	列表
	列表是一个能让你存储成组的信息的东西，其中可以包含从几个到数百万个元素。
	在python中用[]来表示列表，并用,来分隔其中的元素
	命名列表时最好使用复数，以表明它是有许多元素组成的
	names=['jack','javen','rose','mike',23,34] 列表中可以放不同类型的变量
	names[3] -----> 'mike' 访问元素
	正向访问索引从0开始，反向访问索引从-1开始
	names[0]=10		修改元素
	names.append('curry')	列表末尾添加
	names.insert(1,'tom')	在索引位置1处插入元素，原来的元素在之前的位置的基础上向后顺延
	del names[0]	删除索引0处的元素
	names.pop()		弹出列表最后一个元素，可以将其用作他用，del是直接删除，无法用其他变量接住删掉的变量
	names.pop(2)	弹出索引为2的元素，用作他用
	names.remove('rose')	删除指定元素，不用知道位置，删除第一个遇到的该值，如果要全部删除就使用循环
	names.sort()	对列表中的元素进行永久排序，一般数字变量在前，字符串变量在后，数字按照从大到小，字符串按照首字母顺序，想反序排序的话，加入参数，这样写names.sort(reverse=true)
	names.sorted()	对列表中的元素进行临时排序，即可以将结果传到其他变量作他用，但是列表中元素是不改变顺序的
	names.reverse()	对列表中的元素进行永久性的调转顺序，即整个列表完全颠倒过来，想恢复的话，在执行一次颠倒就好了
	len(names)	获取列表的长度
	for name in names:		使用for循环就可以直接便利列表中的每个元素进行处理
	range(1,10)		创建一个1到9的数字列表

7	列表解析
	生成列表一般需要三四行代码，而列表解析只需要一行代码就能生成这样的列表。列表解析是将for循环和创建新元素的代码合并成一行，并自动附加新元素。
	squares=[value**2 for value in range(1,11)] --------> [1,4,9,16,25,36,49,64,81,100]

8	元组
	列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的。然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求。python将不能修改的值称为不可变的，而由不能修改的值组成的列表被称为元组。
	元组看起来犹如列表，但是使用圆括号而不是方括号来标识。元组的访问跟列表相同。
	dimensions=(200,50,30,100) 定义元组
	dimensions[0]=100	错误操作，元组的元素是无法改变的
	dimensions=(300,200) 重新定义了元组，之前的元组变量就被覆盖了，不存在了。












































